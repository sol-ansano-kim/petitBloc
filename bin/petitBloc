#!/usr/bin/env python2.7

import sys
import os
import optparse


if __name__ == "__main__":
    parser = optparse.OptionParser()
    ## scene
    parser.add_option("-s", dest="scene", help="Input .blcs file", action="store", default="")

    ## running
    parser.add_option("-c", dest="context", help="Override scene context value (mult-usable) (e.g. -c $testInt=1 -p $testBool=[0|1])", action="append", default=[])
    parser.add_option("-p", dest="parameter", help="Override parmeter value (mult-usable) (e.g. -p /scene/test@value=1.5 -p /scene/test@on=[0|1])", action="append", default=[])
    parser.add_option("-v", dest="verboseLevel", help="Verbose level(0~3)(default 2)", type="int", action="store", default=2)
    parser.add_option("-m", dest="maxProcess", help="Max process count(default 1)", type="int", action="store", default=1)

    ## query
    parser.add_option("-i", dest="info", help="Display infomation of the block (Don't execute)", action="store", default="")
    parser.add_option("-b", dest="blocks", help="Display block list (Don't execute)", action="store_true", default=False)
    parser.add_option("-q", dest="query", help="Display the contents of the scene (Don't execute)", action="store_true", default=False)

    opts, _ = parser.parse_args(sys.argv[1:])

    try:
        import petitBloc
    except:
        sys.path.append(os.path.abspath(os.path.join(__file__, "../../python")))
        import petitBloc


    if not opts.scene and not opts.info and not opts.blocks:
        parser.print_help()
        sys.exit(1)


    if opts.blocks:
        print("# Block List")
        for b in petitBloc.AllBlockTypes():
            print("    {}".format(b))

        sys.exit(0)


    if opts.info:
        block_info = petitBloc.BlockInfo(opts.info)
        if block_info is None:
            print("# No block type '{}'".format(opts.info))
            sys.exit(1)

        print("# <{}>".format(block_info["name"]))
        print("    Parameter")
        for k, v in block_info["params"].items():
            print("        '{}' ({})".format(k, v["type"]))
        print("    InPort")
        for k, v in block_info["in_ports"].items():
            print("        '{}' ({})".format(k, v["type"]))
        print("    OutPort")
        for k, v in block_info["out_ports"].items():
            print("        '{}' ({})".format(k, v["type"]))

        sys.exit(0)


    if (not opts.scene) or (not os.path.isfile(opts.scene)) or (os.path.splitext(opts.scene)[-1].lower() != ".blcs"):
        print("Invalid scene file : {}".format(opts.scene))
        sys.exit(1)


    if opts.query:
        scene_infos = petitBloc.QueryScene(opts.scene)

        if scene_infos["blocks"]:
            print("# List Blocks")
        for block_path, block_info in scene_infos["blocks"].items():
            print("\n    '{}'({})".format(block_path, block_info["type"]))
            for parm_name, param_value in block_info["params"].items():
                print("       > {}@{}: {}".format(block_path, parm_name, param_value))
            for parm_name, param_value in block_info["extraParams"].items():
                print("       > {}@{}: {}".format(block_path, parm_name, param_value))

        if scene_infos["connections"]:
            print("\n# List Connections\n")
        for con in scene_infos["connections"]:
            print("    {} >> {}".format(con["src"], con["path"]))

        sys.exit(0)


    if not petitBloc.Run(path=opts.scene, contexts=opts.context, parameters=opts.parameter, blocks=opts.blocks, query=opts.query, info=opts.info, maxProcess=opts.maxProcess, verbose=opts.verboseLevel):
        sys.exit(1)


    sys.exit(0)
